<!-- Styles -->
<style scoped>
  .song-contents, .inner-song-player {
    margin-top: 10px;
    padding: 10px;
    border: 1px solid rgba(0, 0, 0, 0.1);
  }

  .inner-song-player {
    display: flex;
    justify-content: space-around;
    color: lightgrey;
  }
  
  .button {
    cursor: pointer;
  }
</style>

<!-- JavaScript -->
<script src="https://w.soundcloud.com/player/api.js"></script>
<script src="<%= javascript_asset_path(module: "home", file: "_soundcloud", format: 'js') %>"></script>
<script type="module" defer>
  class SoundCloudPartial {
    constructor() {
      this.songId = <%= song.id %>;
      this.songDecibel = <%= song.decibels %>;
      this.lowestDecibel = <%= @lowest_decibel %>;
      this.normalizedVolume = SoundCloud.normalizeVolume(this.songDecibel, this.lowestDecibel)
      this.startTime = "<%= song.start_time %>";
      this.endTime = "<%= song.end_time %>";
      this.endTimeTimeout = null;
      this.nextSongTimeout = null;

      this.widget = undefined;
      this.playing = false;
    }

    stopSong() {
      // The fadeout doesn't work on mobile phones.
      const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
      if (isMobile) {
        widget.pause();
      } else {
        SoundCloud.decreaseVolumeAndStop(this.widget, this.normalizedVolume);
      }

      this.playing = false;

      const playBtn = document.getElementById('play-button');
      playBtn.innerHTML = 'play_circle_outline';
 
      // Move to the next song after 8 seconds.
      this.nextSongTimeout = setTimeout(() => { window.location.href = window.location.href}, 8000);
    }

    songTogglePlay() {
      const playBtn = document.getElementById('play-button');
      if(this.playing === false) {
        // If accidentally stop song, then restart, don't reload.
        clearTimeout(this.nextSongTimeout);
        this.widget.play();
        this.playing = true;
        SoundCloud.increaseVolume(this.widget, this.normalizedVolume);
        playBtn.innerHTML = 'stop';

        if(this.endTime) {
          const {startTimeInMicro, endTimeInMicro} = SoundCloud.startAndEndTimesToMicroseconds(this.startTime, this.endTime);
          const endDifference = endTimeInMicro - startTimeInMicro;
          // Allow for the 2 seconds of fading out.
          const endStartIn = endDifference - 2000;
          this.endTimeTimeout = setTimeout(() => { this.stopSong() }, endStartIn)
        }
      } else {
        clearTimeout(this.endTimeTimeout);
        this.stopSong();
      }
    }

    watchSkipSong() {
      const skipBtn = document.getElementById('skip-button');
      skipBtn.addEventListener('click', () => {
        const currentURL = window.location.href;
        const urlSearchParams = new URLSearchParams(window.location.search);
        const params = Object.fromEntries(urlSearchParams.entries());

        const newPage = '/skip_song';

        let newURL = newPage;
        if (Object.keys(params).length > 0) {
          const searchParams = new URLSearchParams(params);
          newURL += `?${searchParams.toString()}`;
          newURL += `&song_id=${this.songId}`;
        } else {
          newURL += `?song_id=${this.songId}`;
        }

        window.location.href = newURL;
      });
    }

    watchPlayButton() {
      const playBtn = document.getElementById('play-button');
      playBtn.addEventListener('click', () => {
        this.songTogglePlay();
      });
    }

    // Will start and stop the song on space bar press.
    watchSpaceBar() {
      document.body.onkeyup = (e) => {
        if (e.key == " " ||
          e.code == "Space" ||      
          e.keyCode == 32      
        ) {
          this.songTogglePlay();
        }
      }
    }
    
    // Sets the initial start time and volume on the widget.
    setInitialStartTimeAndVolume() {
      const { startTimeInMicro } = SoundCloud.startAndEndTimesToMicroseconds(this.startTime, this.endTime);
      if(startTimeInMicro > 0) {
        this.widget.seekTo(startTimeInMicro);
      }

      this.widget.setVolume(0);
    }

    initialize() {
      const iframeElement   = document.querySelector('iframe');
      const iframeElementID = iframeElement.id;
      const widget          = SC.Widget(iframeElement);
      
      widget.bind(SC.Widget.Events.READY, () => {
        this.widget = widget;
        this.setInitialStartTimeAndVolume();
        this.watchSpaceBar();
        this.watchPlayButton();
        this.watchSkipSong();

        const songPlayerIcons = document.getElementById('song-player');
        songPlayerIcons.style.color = "black";
      });

      // Load the next song after finish
      widget.bind(SC.Widget.Events.FINISH, () => {
        window.location.href = window.location.href;
      })
    }
  }

  const soundCloudInstance = new SoundCloudPartial();
  soundCloudInstance.initialize();
</script>

<!-- HTML -->
<div class='song-container'>
  <div class='song-contents'>
    <div>
      Title: <%= song.title %>
    </div>
    <div>
      NSFW: <%= song.nsfw %>
    </div>
    <iframe width="100%" height="166" scrolling="no" frameborder="no" allow="autoplay"
      src="<%= song.url %>">
    </iframe>
  </div>
  <div class='inner-song-player' id='song-player'>
    <i class="medium material-icons button" id='play-button'>play_circle_outline</i>
    <i class="medium material-icons button" id='skip-button'>skip_next</i>
  </div>
</div>
